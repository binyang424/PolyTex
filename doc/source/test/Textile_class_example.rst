
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source\test\Textile_class_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_source_test_Textile_class_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_test_Textile_class_example.py:


Textile class example
=================
This example shows how to use the Textile class in polytex package. It is
designed to handle the parametrization and geometrical analysis of a fiber Textile.
A Tow instance is created by passing the point cloud of a tow, which consists only the points
 on the Textile surface, to the constructor.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default


    import numpy as np
    from tqdm.auto import tqdm
    import polytex as pk
    from polytex.geometry import Plane


.. GENERATED FROM PYTHON SOURCE LINES 16-23

Create a textile object
--------------------------------------------------------------------------------
1. create a textile object
2. add tows to the textile object
3. add groups to the textile object
4. remove tows from the textile object. The same tows in self.groups will be
   removed automatically.

.. GENERATED FROM PYTHON SOURCE LINES 23-53

.. code-block:: default

    textile = pk.Textile(name="TG96N_Vf57")
    print(textile.name)

    path = "../Data/22um_Vf57/05_processed_data/transformation/tow/weft/"
    files = pk.filenames(path, ".tow")[1:-2]

    for file in tqdm(files):
        print(file)
        tow = pk.pk_load(path + file)
        textile.add_tow(tow)

    print(textile.tows)
    print(textile.tows.keys())

    textile.remove("weft_1")  # remove a tow from the textile object
    print(textile.tows.keys())

    weft_2 = textile.tows["weft_2"]
    textile.add_group(name="weft", tow=weft_2)  # add an existing tow to the group
    print(textile.groups)

    # add an empty group
    textile.add_group(name="warp")
    print(textile.groups)

    tow_new = pk.pk_load(path + files[-1])
    print(tow_new.name)
    textile.add_group(name="weft", tow=tow_new)  # add a new tow to the group
    print(textile.groups)


.. GENERATED FROM PYTHON SOURCE LINES 54-59

Create a background mesh for the textile domain
--------------------------------------------------------------------------------
1. define the bounding box of the textile domain
2. define the voxel size
3. generate the background mesh with textile.mesh()

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: default

    bbox = np.array((0.6, 12, 1.07, 14.19, 0.15, 5.5))
    voxel_size = [0.132, 0.132, 0.066]
    textile.mesh(bbox, voxel_size=voxel_size, show=False)

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_source_test_Textile_class_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Textile_class_example.py <Textile_class_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Textile_class_example.ipynb <Textile_class_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
