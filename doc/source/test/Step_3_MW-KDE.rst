
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source\test\Step_3_MW-KDE.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_test_Step_3_MW-KDE.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_test_Step_3_MW-KDE.py:


Moving window KDE
=========================

This example shows how to use the moving window KDE to resample the control
points of the tow.

.. GENERATED FROM PYTHON SOURCE LINES 10-12

Load example dataset
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: Python

    import numpy as np
    import polytex as ptx
    import matplotlib.pyplot as plt

    # Input: parameters
    resolution = 0.022  # 0.022 mm
    # number of extrema (control points) for contour description
    extremaNum, windows, nuggets = 10, 2, [1e-3]

    # Load the example dataset
    path = ptx.example("sorted coordinate")
    coordinatesSorted = ptx.pk_load(path)


.. GENERATED FROM PYTHON SOURCE LINES 26-31

Visualize the dataset (a tow contour)
-------------------------------------
The tow contour is described by a set of control points. The control points
can be labeled by its z coordinate (the scanning slices) since the dataset is
obtained from Micro CT scanning. The control points are sorted by its z coordinate.

.. GENERATED FROM PYTHON SOURCE LINES 31-46

.. code-block:: Python

    fig = plt.figure()
    ax = fig.add_subplot(projection='3d')

    x = coordinatesSorted["X"].to_numpy()
    y = coordinatesSorted["Y"].to_numpy()
    z = coordinatesSorted["Z"].to_numpy()
    ax.scatter(x, y, z, s=1, marker="o", c=z)

    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_zlabel("Z")
    ax.set_title("Control points of a fiber tow")
    ax.set_aspect("equal")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 47-49

Slice number of the tow
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python

    slices = np.array(coordinatesSorted["Z"] / resolution, dtype=int)
    nslices = np.unique(slices).size  # number of slices



.. GENERATED FROM PYTHON SOURCE LINES 54-56

Dataset preparation for moving window kernel density estimation
---------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 56-66

.. code-block:: Python

    t_norm = np.vstack((coordinatesSorted["normalized distance"], slices)).T

    # bw = np.arange(0.01, 0.03, 0.01)  # specify a range for bandwidth optimization
    # initialize the bandwidth according to Scott's rule
    bw = 0.01

    kdeOutput, cluster_centers = ptx.stats.movingKDE(t_norm, bw, windows, extremaNum)

    kdeOutput.plot(x="normalized distance", y="probability density")
    plt.show()


.. _sphx_glr_download_source_test_Step_3_MW-KDE.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Step_3_MW-KDE.ipynb <Step_3_MW-KDE.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Step_3_MW-KDE.py <Step_3_MW-KDE.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
