
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source\test\transformation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_test_transformation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_test_transformation.py:


Coordinate transformation
=========================
The following code is a demonstration of coordinate transformation using direct
cosine matrix (DCM) and Euler angles (phi, theta, psi).

.. GENERATED FROM PYTHON SOURCE LINES 7-14

.. code-block:: default

    import polykriging as pk
    from polykriging.geometry import transform as tf
    import numpy as np
    import pyvista as pv

    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 15-17

Load test data
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default

    path = pk.example(data_name="cross-section")
    data = pv.read(path)
    normal = [0.43583834, -0.00777955, -0.89999134]
    data.plot()


.. GENERATED FROM PYTHON SOURCE LINES 23-29

Get the data points and its centroid
------------------------------------------------------------
The example data is a cross-section of a woven fabric stored in a vtk file.
This can be loaded using pyvista as shown above. Now we get the points and
the centroid of the cross-section. We will use the centroid as the origin
of the local coordinate system.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default

    points = data.points
    centroid = np.mean(points, axis=0)


.. GENERATED FROM PYTHON SOURCE LINES 33-39

Translation
------------------------------------------------------------
Move the centroid to the origin of global coordinate system.
Note that we did not import the translation function so far.
So the user should translate the local coordinate system to
the origin before calling the rotation functions.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    points = points - centroid


.. GENERATED FROM PYTHON SOURCE LINES 42-47

Euler angles for rotation
------------------------------------------------------------
We want to rotate the global coordinate system to align its z-axis
with the normal vector of the cross-section. To do this, we need to
find the euler angles (phi, theta, psi).

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    angles = tf.euler_z_noraml(normal)


.. GENERATED FROM PYTHON SOURCE LINES 50-53

Direct cosine matrix
------------------------------------------------------------
Now we can use the euler angles to construct the DCM:

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    dcm = tf.e123_dcm(*angles)


.. GENERATED FROM PYTHON SOURCE LINES 56-59

Check the result
------------------------------------------------------------
Rotate the points

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: default

    points1 = np.dot(dcm, points.T).T

    # Plot the rotated points
    plt.plot(points1[:, 0], points1[:, 1], "o")
    # equal aspect ratio
    plt.gca().set_aspect("equal", adjustable="box")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 68-72

# Note
 ------------------------------------------------------------
 We need to sort the points first before using them to
 construct a polygon and find the area or perimeter.

.. GENERATED FROM PYTHON SOURCE LINES 75-82

Align the old coordinate system with a new one
------------------------------------------------------------
Above we aligned the z-axis of the global coordinate system
with a given vector but without considering the x- and y-axes.
Now we want to align the old coordinate system with a new one
defined by two vectors: z_new and x_new. The following code
shows how to do this.

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default


    x_new = points[np.argmax(np.linalg.norm(points, axis=1))]

    angles2 = tf.euler_zx_coordinate(normal, x_new)
    dcm = tf.e123_dcm(*angles2)
    points2 = np.dot(dcm, points.T).T


.. GENERATED FROM PYTHON SOURCE LINES 90-93

Check the result
------------------------------------------------------------
Plot the rotated points

.. GENERATED FROM PYTHON SOURCE LINES 93-99

.. code-block:: default

    plt.plot(points2[:, 0], points2[:, 1], "o")
    plt.scatter(0, 0, c="r")
    # equal aspect ratio
    plt.gca().set_aspect("equal", adjustable="box")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 100-104

Compare
------------------------------------------------------------
A comparison between the direct cosine matrix and the coordinate
the basis vectors of the original coordinate system after rotation.

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default

    basis = np.eye(3)
    print(np.dot(dcm, basis.T).T)
    print(dcm)



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_source_test_transformation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: transformation.py <transformation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: transformation.ipynb <transformation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
