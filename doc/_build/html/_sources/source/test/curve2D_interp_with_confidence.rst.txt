
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source\test\curve2D_interp_with_confidence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_source_test_curve2D_interp_with_confidence.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_test_curve2D_interp_with_confidence.py:


Test
=================

Test

.. GENERATED FROM PYTHON SOURCE LINES 8-57

.. code-block:: default


    import numpy as np
    from polykriging.kriging import curve2D
    import polykriging as pk
    import matplotlib.pyplot as plt

    # Make up some data
    X = np.linspace(start=0, stop=10, num=300)
    y = X * np.sin(X)

    # Choose some data points randomly for training
    rng = np.random.RandomState(1)
    training_indices = rng.choice(np.arange(y.size), size=16, replace=False)

    X_train, y_train = X[training_indices], y[training_indices]

    data_set = np.hstack((X_train.reshape(-1, 1), y_train.reshape(-1, 1)))

    name_drift, name_cov = 'lin', 'cub'
    nuggetEffect = 0

    # # Matrice and vectors for dual Kriging formulation
    # mat_krig, mat_krig_inv, vector_ba, expr, func_drift, func_cov = \
    #     curve2D.curveKrig1D(data_set, name_drift, name_cov, nuggetEffect=nuggetEffect)

    # Kriging model and prediction with mean, Kriging expression
    # and the corresponding standard deviation as output.
    mean_prediction, expr, std_prediction = curve2D.curve2Dinter(
        data_set, name_drift, name_cov,
        nuggetEffect=nuggetEffect, interp=X, return_std=True)

    # Plot the results
    plt.plot(X, y, label=r"$f(x) = x \sin(x)$", linestyle="dotted")
    plt.scatter(X_train, y_train, label="Observations", s=50, zorder=10)
    plt.plot(X, mean_prediction, label="Mean prediction")
    plt.fill_between(X.ravel(),
                     mean_prediction - 1.96 * std_prediction,
                     mean_prediction + 1.96 * std_prediction,
                     alpha=0.5, label=r"95% confidence interval")
    plt.legend()
    plt.xlabel("$x$")
    plt.ylabel("$f(x)$")
    _ = plt.title("2D curve Kriging regression on noise-free dataset")

    plt.show()

    expr_dict = {"cross": expr}
    pk.pk_save("FunXY.krig", expr_dict)
    expr_load = pk.pk_load("FunXY.krig")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_source_test_curve2D_interp_with_confidence.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: curve2D_interp_with_confidence.py <curve2D_interp_with_confidence.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: curve2D_interp_with_confidence.ipynb <curve2D_interp_with_confidence.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
