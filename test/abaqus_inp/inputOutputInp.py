import meshio, sys
import numpy as np
import polykriging as pk

filename = "./dryFabric.inp"


def node_section_checking(filename):
    """
    Check if the inp file contains multiple node sections. If so, print a
    warning message and exit the program.

    Parameters
    ----------
    filename : str
        The name of the inp file.
    """
    with open(filename, "r") as f:
        lines = f.readlines()
    f.close()

    n = 0
    line_num = 0
    for line in lines:
        line_num += 1
        if line.startswith("*"):
            keyword = line.partition(",")[0].strip().replace("*", "")
            if keyword.upper() == "NODE":
                n += 1

        if keyword.upper() == "NODE" and n >= 2:
            print("The inp file generated by TexGen contains multiple"
                  " '*Node' section. \nPlease remove the second one "
                  "starting from line {} and run this code again.".format(line_num))
            sys.exit()


node_section_checking(filename)

mesh = meshio.read('./dryFabric.inp', "abaqus")

points = mesh.points  # 节点坐标

cells = mesh.cells  # 单元信息
# for i in range(len(cells)):
#     cell_block = cells[i]
#     print(cells[i].type)
#     print(cells[i].data)
#     print('-----------------')

# cell sets/ element sets
cell_sets = mesh.cell_sets
cell_set_names = cell_sets.keys()
for i in cell_set_names:
    data = cell_sets[i]
    print(i)
    print(data)
    print('-----------------')

meshio.write_points_cells(
    "foo.vtk",
    points,
    cells,
    # Optionally provide extra data on points, cells, etc.
    # point_data=point_data,
    cell_sets=cell_sets,
    # field_data=field_data,
    binary=False
)

meshio.write_points_cells(
    "foo.inp",
    points,
    cells,
    # Optionally provide extra data on points, cells, etc.
    # point_data=point_data,
    cell_data={"vf": [np.arange(cells[0].data.shape[0]).tolist(), np.arange(cells[1].data.shape[0]).tolist()]},
    cell_sets=cell_sets,
    # field_data=field_data,
)


# celldata = mesh.cell_data
#
# print(celldata)
#
# #***Attention!!!节点编号及坐标，从1开始
# cell=mesh.cells[0].data #原始数据里节点编号从0开始
# # cell=mesh.get_cells_type('triangle')
# # cell=mesh.cell_data['auto3'] #*ELEMENT,TYPE=S3,ELSET=auto3

def __open_file(filename):
    """
    The function opens the ori or eld file and returns the data it contains.
    It also checks the first valid line of the file. This allows the user to
    read the element data and element orientation data correctly. The line index
    is starting from 1, as one would see in a text editor.
    """
    with open(filename, 'r') as f:
        lines = f.readlines()
        line_data_start = 0
        for line in lines:
            line_data_start += 1
            if line.startswith('1'):
                break
    f.close()
    data = np.array([line.split(',') for line in lines[line_data_start - 1:]], dtype=float)
    return data


eld_data = __open_file(filename[:-4] + (".eld"))
ori_data = __open_file(filename[:-4] + (".ori"))


def __write_file(filename, data, comment):
    """
    The function writes the data to a file. It also adds a header to the file
    to make it readable.

    Parameters
    ----------
    filename : str
        The name of the file.
    data : numpy array
        The data to be written to the file.
    comment : list of str
        The comment to be added to the header.
    """

    eld_header = ['********************\n',
                  '*** ELEMENT DATA ***\n',
                  '********************\n',
                  '** Element data stored as a depvars \n']

    ori_header = ['********************\n',
                  '*** ORIENTATIONS ***\n',
                  '********************\n',
                  '** Orientation vectors\n',
                  '** 1st vector represents the fibre direction\n',
                  '** 2nd vector is an arbitrary vector perpendicular to the first\n',
                  ', 1.0, 0.0, 0.0,   0.0, 1.0, 0.0\n']

    # check file extension
    if filename[-4:] not in ['.eld', '.ori']:
        raise ValueError('The file extension is not valid. '
                         'The function only accepts .eld or .ori file.')
    if filename[-4:] == '.eld':
        header = eld_header
    else:
        header = ori_header

    if len(comment) > 0:
        tmp_comment = ['** ' + i + '\n' for i in comment]
        header = header + tmp_comment

    with open(filename, 'w') as f:
        for i in header:
            f.write(i)
        for i in data:
            temp = ''
            for j in i:
                temp += str(j) + ','
            f.write(temp + '\n')
    f.close()


comment = ['The first column is the element number.',
           'The second column is the element type.',
           'The third column is the element set number.']
__write_file(filename[:-4] + ("2.eld"), eld_data[:, [0, 1, 4]], comment)
__write_file(filename[:-4] + ("2.ori"), ori_data, comment)
