'''
非参数方程
Bin Yang
September, 2021
Polytechnique Montreal and WHUT

1. Sorting all the feature points of each contour from the minimum angular position
2. Calculate the normalised distance and save with angular position
3. Get the kriging function for each iSlice and save as json file
4. Save data generated by kriging, including the following items:
    ["x", "y", "z", "distance", "normalised distance", "angle position (degree)", "radius", "nugget"]
'''

# -*- coding: utf-8 -*-

import csv, os
import numpy as np
import sympy as sym

import matplotlib.pyplot as plt

from polykriging import curve2D, utility



folder = '.\\0\\'
fcsv=utility.filenames(folder)

# load contour described by point cloud
nslice = len(fcsv)

centerline = np.zeros([nslice, 3])
# [nslice, nPoints, Area, Perimeter, Angle, Width, Height]

fig = plt.figure()

krigFun = {"info":"TG96M",
               "warp":{ "krig":{}, "area":" ", "surfdist":{"1":3},"tangent":[1,2,3] },               
               "weft":{ "krig":{}, "area":" ", "surfdist":{"1":3}, "tangent":[1,2,3] },
               "binder":{ "krig":{}, "area":" ", "surfdist":{"1":3}, "tangent":[1,2,3] }
               }

nugget = 1e-10
for iSlice in np.arange(nslice):
    file = fcsv[iSlice]
    path = folder + file
    coordinate = np.loadtxt(open(path, "rb"), delimiter=",",
                            skiprows=1, usecols=(1,2,3))


##    # x,y,z, distance, normalised dis, angle position, radius, nugget
##    coorSM = np.zeros([coorSort.shape[0], 9])
##    
##    for i in np.arange(coorSort.shape[0]-1):
##        coorSM[i+1, 4] = np.linalg.norm(coorSort[i+1]-coorSort[i]) + coorSM[i, 4]
##
##    # distance, x, kriged value                       
##    xinter = np.zeros([coorSort.shape[0],3])
##    
##    xinter[:,0] = coorSM[:, 4]/np.max(coorSM[:, 4])
##    xinter[:,1] = coorSort[:,0]
##    xinter = np.append(xinter, [xinter[0]], axis = 0)
##    
##    yinter = np.zeros([coorSort.shape[0],3])
##    yinter[:,0] = xinter[:,0][:-1]
##    yinter[:,1] = coorSort[:,1]
##    yinter = np.append(yinter, [yinter[0]], axis=0)
    
    
    xmat_krig, xmat_krig_inv, xvector_ba, xexpr = curve2D.curveKrig(coordinate[:,:2],
                                                                'quad', 'cub',nuggetEffect = nugget)
##    ymat_krig, ymat_krig_inv, yvector_ba, yexpr = curve2D.curveKrig(yinter,
##                                                                'quad', 'cub',nuggetEffect = nugget)

    
    krigFun["weft"]["krig"][str(int(coordinate[0,2]))] = str(xexpr)


##    x = sym.symbols('x')
##    for pts in range(coorSort.shape[0]+1):
##        xinter[pts,2] = xexpr.subs({x:xinter[pts,0]})
##        yinter[pts,2] = yexpr.subs({x:yinter[pts,0]})


##    ax = fig.add_subplot(1, 1, 1)
##    # ax.set_axis_off()
##    plt.fill(coordinate[:, 0], coordinate[:, 1] ,facecolor='pink',alpha=0.5)
##    #plt.fill(xinter[:,2], yinter[:,2] ,facecolor='blue',alpha=0.2)
##    #plt.plot(coorSM[:,0], coorSM[:,1] )
##    #plt.annotate("nugget=" + str(nugget), (100, 245))
##    #plt.grid(True, which = 'both', color='gray', linestyle='--', linewidth=1)
##
##    plt.scatter(0,0,marker='.', c='r')
##    ax = plt.gca()
##    ax.set_xlim(40, )
##    ax.set_ylim(215, 250)
##    ax.set_aspect(1)
##    
##    coorSM[:,1] = xinter[:-1,2]    # x
##    coorSM[:,2] = yinter[:-1,2]    # y
##    coorSM[:,3] = coordinate[:,2]   # z
##    
##    coorSM[:,5] = xinter[:-1,0]     # normalised distance
##    coorSM[:,6] = angle
##    #coorSM[:,7] = radius
##    coorSM[:,8] = nugget
##    
##    utility.create_csv('./longSm/0/nugget/', fcsv[iSlice][:-4], coorSM)
##    print(int(iSlice/nslice*100), '%')
    #plt.show()
    
# save as json file
import json
with open('krigFunXY.json', 'w', encoding='utf-8') as f:
    json.dump(krigFun, f, ensure_ascii=True, indent=4)
f.close()
